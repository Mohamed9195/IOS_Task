//
//  HomeInteractor.swift
//
//  Created by mohamed hashem on 19/02/2021.
//  Copyright (c) 2021 mohamed hashem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol HomeInteractorInput: class {
    func loadAllNews(apiKey: String)
}

protocol HomeInteractorOutput: class {
    func present(news: IOSTaskModel)
    func present(error: Error)
}

class HomeInteractor: HomeInteractorInput {

    var output: HomeInteractorOutput?
    private var worker: HomeWorker

    private let disposed = DisposeBag()
    private let provider: TaskEndPoints

    // can inject any provider for network
    init(provider: TaskEndPoints = TaskEndPoints(), worker: HomeWorker = HomeWorker()) {
        self.provider = provider
        self.worker = worker
    }

    func loadAllNews(apiKey: String) {
        worker.doLoadAllNewsRequest(apiKey: apiKey, provider: provider)
            .subscribe(onNext: { [weak self] response in
                guard let self = self else { return }

                self.output?.present(news: response)

            }, onError: { [weak self] error in
                guard let self = self else { return }

                self.output?.present(error: error)

            }).disposed(by: disposed)
    }
}
